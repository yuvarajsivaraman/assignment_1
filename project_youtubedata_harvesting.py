# -*- coding: utf-8 -*-
"""project_youtubedata_harvesting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g-2qdEZZeS6uta6RhfZNQ9MFTnEZs9UT
"""

!pip install google-api-python-client
!pip install mysql-connector-python
!pip install pymongo
!pip install streamlit

from pprint import pprint
import pandas as pd
import streamlit as st
import googleapiclient.discovery

api_key='AIzaSyDy_mqADoXVKWEAFJ1sdxdtuRCRnVAKgzE'
api_service_name = "youtube"
api_version ="v3"

youtube = googleapiclient.discovery.build(api_service_name, api_version, developerKey=api_key)

def get_channel_details(c_id):
  request = youtube.channels().list(
        part="snippet,contentDetails,statistics",
        id=c_id
    )
  response = request.execute()

  data = {"channel_name" : response['items'][0]['snippet']['title'],
          "published_at" : response['items'][0]['snippet']['publishedAt'],
          "p_id" : response['items'][0]['contentDetails']['relatedPlaylists']['uploads'],
          "sub_count" : response['items'][0]['statistics']['subscriberCount'],
          "video_count" : response['items'][0]['statistics']['videoCount'],
          "view_count" : response['items'][0]['statistics']['viewCount']}
  return data

get_channel_details('UCLbdVvreihwZRL6kwuEUYsA')

channel_ids = ["UCJcCB-QYPIBcbKcBQOTwhiA","UCLbdVvreihwZRL6kwuEUYsA", "UCueYcgdqos0_PzNOq81zAFg", "UCn4rEMqKtwBQ6-oEwbd4PcA","UCials1wQnEN_NykYZr1048w","UCk3JZr7eS3pg5AGEvBdEvFg"]
channel_details = []
for c_id in channel_ids:
  c_detail = get_channel_details(c_id)
  c_detail['channel_id'] = c_id
  channel_details.append(c_detail)

channel_details

def extract_iso_time(dur):
    dur = dur[2:]
    h = dur.find('H')
    m = dur.find('M')
    s = dur.find('Y')
    hours, minutes, seconds = 0, 0, 0
    if h >= 0:
        hours = dur[:h]
    if m >= 0:
        minutes = dur[h+1:m]
    if s >= 0:
      seconds = dur[m+1:s]

    return (int(hours) * 3600) +  (int(minutes) * 60) + int(seconds)


extract_iso_time('PT1M')

def get_video_details(v_id):
  request = youtube.videos().list(
        part="snippet,contentDetails,statistics",
        id=v_id
    )
  response = request.execute()
  # pprint(response['items'][0])

  video_data = {"video_name" : response['items'][0]['snippet']['title'],
                "channel_id": response['items'][0]['snippet']['channelId'],
                "video_id" : response['items'][0]['id'],
                "public_At" : response['items'][0]['snippet']['publishedAt'],
                "comment_count" : response['items'][0]['statistics']['commentCount'],
                "favourite_count" : response['items'][0]['statistics']['favoriteCount'],
                "like_count" : response['items'][0]['statistics']['likeCount'],
                "vid_view_count" : response['items'][0]['statistics']['viewCount'],
                "vid_duration": extract_iso_time(response['items'][0]['contentDetails']['duration']),
                "video_description" : response['items'][0]['snippet']['localized']['description']}
  return video_data

def get_comment_details(video_id):
    request = youtube.commentThreads().list(
        part="snippet",
        videoId=video_id,
        maxResults=10
    )
    response = request.execute()

    comments = []
    for item in response['items']:
       # print(item)
        comment_data = {
            "comment_id": item['id'],
            "video_id": item['snippet']['videoId'],
            "comment_text": item['snippet']['topLevelComment']['snippet']['textOriginal'],
            "comment_author": item['snippet']['topLevelComment']['snippet']['authorDisplayName'],
            "comment_published_At": item['snippet']['topLevelComment']['snippet']['publishedAt']
        }
        comments.append(comment_data)
    return comments

get_video_details('c1HX_EbZYAo')

def get_videos_for_channel(channel, count=25):

    request = youtube.playlistItems().list(
        part='contentDetails',
        maxResults=count,
        playlistId=channel['p_id']
      )
    response = request.execute()
    video_ids=[]
    videos=[]
    for item in response['items'][1:]:
        # print(item)
        video_id = item['contentDetails']['videoId']
        video_ids.append(video_id)
        video_details = get_video_details(video_id)
        video_details['comments'] = get_comment_details(video_id)
        videos.append(video_details)
        video_details.update(channel)
    return videos

videos = []
for channel in channel_details:
  # print(channel['p_id'])
  videos.extend(get_videos_for_channel(channel))

# len(videos)

get_video_details('lDf9KLSGoas')

from pymongo import MongoClient
connection = MongoClient("mongodb+srv://yuvarajs:guvi2024@cluster0.bk244m9.mongodb.net/")
db = connection.youtube
collection = db.video_details
# collection.insert_many(videos)

result = collection.find({})
result = list(result)

channel_table = []
comments_table = []
videos_table = []

for channel in channel_details:
  keys = ['channel_name', 'channel_id', 'published_at', 'p_id', 'sub_count', 'video_count','view_count']
  channel_table.append([channel[key] for key in keys])

for video in videos:
  keys = ['video_id', 'channel_id', 'video_name', 'public_At', 'comment_count', 'favourite_count', 'like_count' , 'vid_view_count', 'vid_duration','video_description']
  videos_table.append([video[key] for key in keys])
  for comment in video['comments']:
    comment_keys = ['comment_id', 'video_id', 'comment_text', 'comment_author', 'comment_published_At']
    comments_table.append([comment[key] for key in comment_keys])

import pandas as pd
import sqlite3
con = sqlite3.connect("youtube.db")
cur = con.cursor()

def create_video_table(curr, drop=False):
  if drop:
    curr.execute("drop table if exists videos")
  curr.execute("CREATE TABLE videos(video_id, channel_id, video_name, public_At, comment_count INTEGER, favourite_count INTEGER, like_count INTEGER, vid_view_count INTEGER,vid_duration INTEGER,video_description) ")

def create_comments_table(curr, drop=False):
    if drop:
      curr.execute("drop table if exists comments")
    curr.execute("CREATE TABLE comments(comment_id, video_id, comment_text, comment_author, comment_published_At) ")

def create_channels_table(curr, drop=False):
    if drop:
      curr.execute("drop table if exists channels")
    curr.execute("CREATE TABLE channels(channel_name, channel_id, published_at, p_id, sub_count INTEGER, video_count INTEGER,view_count INTEGER) ")

create_video_table(cur, drop=True)
create_comments_table(cur, drop=True)
create_channels_table(cur, drop=True)

def insert_videos(curr, videos):
  curr.executemany ("""INSERT INTO videos(video_id, channel_id, video_name, public_At, comment_count, favourite_count, like_count, vid_view_count, vid_duration, video_description)
                                 VALUES (?,?,?,?,?,?,?,?,?,?)""" , videos)

def insert_comments(curr, comments):
  curr.executemany("""INSERT INTO comments(comment_id, video_id, comment_text, comment_author, comment_published_At) VALUES (?,?,?,?,?)""", comments)

def insert_channels(curr, channels):
  curr.executemany("""INSERT INTO channels(channel_name, channel_id, published_at, p_id, sub_count, video_count,view_count) VALUES (?, ?, ?, ?, ?, ?, ?)""", channels)

insert_videos(cur, videos_table)
insert_comments(cur, comments_table)
insert_channels(cur, channel_table)

Table_name=pd.read_sql_query('''SELECT name FROM sqlite_master WHERE type = 'table' AND name NOT LIKE 'sqlite_%';''',con )

pd.read_sql_query("select * from channels", con)

print("Total Tables are:",len(Table_name))
print("*"*20)

pd.read_sql_query('select * from channels', con)

Table_name

channel = pd.read_sql_query('select * from videos',con)
channel

"""Query:1 What are the names of all the videos and their corresponding channels?"""

Query1 = pd.read_sql_query('SELECT channel_name,video_name FROM videos v JOIN channels c on v.channel_id = c.channel_id ',con)
Query1.head(10)

"""Query:2
Which channels have the most number of videos, and how many videos do
 they have?
"""

Query2 = pd.read_sql_query('SELECT channel_name, max(video_count) from channels' ,con)
Query2

"""Query:3 What are the top 10 most viewed videos and their respective channels?"""

Query3 = pd.read_sql_query('SELECT channel_name, video_name,vid_view_count FROM videos v JOIN channels c on v.channel_id = c.channel_id order by vid_view_count desc limit 10 ',con)
Query3

"""Query:4 How many comments were made on each video, and what are their corresponding video names?"""

Query4 = pd.read_sql_query('SELECT video_name, comment_count FROM videos',con)
Query4

"""Query:5 Which videos have the highest number of likes, and what are their corresponding channel names?"""

Query5 = pd.read_sql_query('SELECT channel_name, video_name, like_count FROM videos v JOIN channels c on v.channel_id = c.channel_id  ORDER BY like_count DESC LIMIT 10',con)
Query5

"""Query:6 What is the total number of likes and dislikes for each video, and what are their corresponding video names?"""

Query6 = pd.read_sql_query('SELECT video_name,like_count FROM videos',con)
Query6

"""Query:7 What is the total number of views for each channel, and what are their corresponding channel names?"""

Query7 = pd.read_sql_query('SELECT channel_name,video_name,like_count FROM videos JOIN channels ORDER BY like_count DESC LIMIT 10',con)
Query7

""" Query:8 What are the names of all the channels that have published videos in the year 2022?"""

Query8 = pd.read_sql_query("SELECT channel_name,public_At FROM videos v JOIN channels c on v.channel_id = c.channel_id",con)
Query8['public_At'] = pd.to_datetime(Query8['public_At'])
# mask = Query8['public_At'].dt.year == int(2024)
# Query8 = Query8[mask]
Query8
#--------------------

"""Query:9 What is the average duration of all videos in each channel, and what are their corresponding channel names?"""

Query9 = pd.read_sql_query('SELECT channel_name, avg(vid_duration) FROM videos v JOIN channels c on v.channel_id = c.channel_id group by channel_name',con)
Query9

""" Query:10 Which videos have the highest number of comments, and what are their corresponding channel names?"""

Query10= pd.read_sql_query('SELECT channel_name,comment_count FROM videos v JOIN channels c on v.channel_id = c.channel_id order by comment_count desc limit 20',con)
Query10

